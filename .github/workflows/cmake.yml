name: CMake

on: [push]

#env:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build_type : [ Release, Debug ]
        os : [ macos-latest, ubuntu-20.04 ]
        include:
          - os: ubuntu-20.04
            cxx: /usr/bin/g++-9
          - os: macos-latest
            cxx: clang++

    name: "${{ matrix.os }}: ${{ matrix.cxx }} ${{ matrix.build_type }}"
    runs-on: ${{ matrix.os }}
    env:
      CXX : ${{ matrix.cxx }}
      BUILD_CONFIG : >
        -G Ninja
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_PREFIX_PATH=/usr/local/opt/bison

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Install prerequisite MacOS packages
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install ninja gcc@10 boost eigen open-mpi bison

    - name: Install prerequisites Ubuntu packages
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        sudo apt-get install ninja-build g++-9 liblapack-dev libboost-dev libeigen3-dev openmpi-bin libopenmpi-dev
        if [ ${{matrix.build_type}} = "Release" ]; then
          sudo apt-get install libclang1-9 graphviz fonts-liberation
          export DOXYGEN_VERSION=1.9.1
          cd ${{github.workspace}}/build
          wget https://downloads.sourceforge.net/project/doxygen/rel-${DOXYGEN_VERSION}/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          tar xzf ./doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          export PATH=${{github.workspace}}/build/doxygen-${DOXYGEN_VERSION}/bin:$PATH
          which doxygen
          doxygen --version
        fi

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $BUILD_CONFIG

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C $BUILD_TYPE
      run: |
          for RUNTIME in mad parsec
          do
          for EXAMPLE in test t9 spmm bspmm
          do
          for NPROC in 1 2
          do
            echo "== running $EXAMPLE using runtime $RUNTIME with $NPROC ranks =="
            mpirun --bind-to none --allow-run-as-root -n $NPROC examples/$EXAMPLE-$RUNTIME
          done
          done
          done

    - name: Build+Deploy Dox
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.build_type == 'Release' }}
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        echo "== deploying dox =="
        git config --global user.email "eduard@valeyev.net"
        git config --global user.name "GitHub Actions"
        cmake --build . --config $BUILD_TYPE --target html


